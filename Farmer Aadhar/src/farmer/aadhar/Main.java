/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmer.aadhar;

import com.aadhaarconnect.bridge.capture.model.auth.AuthCaptureData;
import com.aadhaarconnect.bridge.capture.model.auth.AuthCaptureRequest;
import com.aadhaarconnect.bridge.capture.model.auth.Demographics;
import com.aadhaarconnect.bridge.capture.model.auth.Demographics.MatchingStrategy;
import com.aadhaarconnect.bridge.capture.model.auth.Demographics.Name;
import com.aadhaarconnect.bridge.capture.model.common.ConsentType;
import com.aadhaarconnect.bridge.capture.model.common.Location;
import com.aadhaarconnect.bridge.capture.model.common.LocationType;
import com.aadhaarconnect.bridge.capture.model.common.request.CertificateType;
import com.aadhaarconnect.bridge.capture.model.common.request.Modality;
import com.aadhaarconnect.bridge.capture.model.kyc.KycCaptureData;
import com.aadhaarconnect.bridge.capture.model.otp.OtpCaptureRequest;
import com.aadhaarconnect.bridge.capture.model.otp.OtpChannel;
import com.aadhaarconnect.bridge.util.AadhaarBridgeUtil;
import com.google.gson.Gson;
import com.khoslalabs.aadhaar.util.ISO8601;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.JOptionPane;
import net.aksingh.owmjapis.CurrentWeather;
import net.aksingh.owmjapis.OpenWeatherMap;
import org.json.JSONException;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


/**
 *
 * @author pranav
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Aadhar No: ");

        jButton1.setText("Generate OTP");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Pincode");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(140, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(127, 127, 127))
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addContainerGap(84, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        // Create the JSON Object
        /*AuthCaptureRequest authCaptureRequest = new AuthCaptureRequest();

        authCaptureRequest.setAadhaar("645446389945");
        authCaptureRequest.setCertificateType(CertificateType.preprod);
        Location location = new Location();
        location.setType(LocationType.pincode);
        location.setPincode("560067");
        authCaptureRequest.setLocation(location);
        authCaptureRequest.setModality(Modality.demo);

        Demographics demographics  = new Demographics();

        Name nameReq = new Name();
        // if name type is partial
        nameReq.setMatchingStrategy(MatchingStrategy.exact);
        nameReq.setNameValue("Sahil Mutneja");

        demographics.setName(nameReq);

        authCaptureRequest.setDemographics(demographics);
        
        AuthCaptureData authCaptureData;

        try {
            authCaptureData = AadhaarBridgeUtil.buildAuthRequest(authCaptureRequest);
            String json = new Gson().toJson(authCaptureData);
            
            System.out.println(json);
            
            //send this json to gateway /auth endpoint
    
        String url = "http://139.59.30.133:9090/auth";

        String USER_AGENT = "Mozilla/5.0";

            try {
                URL obj = new URL(url);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                // optional default is GET
                    con.setRequestMethod("POST");

                    //add request header
                    con.setRequestProperty("User-Agent", USER_AGENT);
                    con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
                    con.setDoOutput(true);
                    con.setDoInput(true);

                    OutputStream os = con.getOutputStream();
                    os.write(json.getBytes("UTF-8"));
                    os.close();

                    int responseCode = con.getResponseCode();
                    System.out.println("\nSending 'POST' request to URL : " + url);
                    System.out.println("Response Code : " + responseCode);
                    
                    
                    BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
                    }
                    
                    JSONParser parser = new JSONParser();
                    
                    Object object = parser.parse(response.toString());
                    
                    JSONObject jsonObject = (JSONObject) object;
                    
                    Boolean success = (Boolean) jsonObject.get("success");
                    
                    in.close();

                    //print result
                    System.out.println(response.toString());
                    System.out.println(success);
                    
                    if (success == true)
                        JOptionPane.showMessageDialog(null, "You are Demographically authenticated.");
                    else
                        JOptionPane.showMessageDialog(null, "You are not authenticated.");

                    
                    
            } catch (MalformedURLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (org.json.simple.parser.ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ParseException | IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        // Build data for OTP Generation
        
        OtpCaptureRequest otpCaptureRequest = new OtpCaptureRequest();
        otpCaptureRequest.setAadhaar(jTextField1.getText());
        otpCaptureRequest.setCertificateType(CertificateType.preprod);
        Location location = new Location();
        location.setType(LocationType.pincode);
        location.setPincode(jTextField2.getText());
        otpCaptureRequest.setLocation(location);
        otpCaptureRequest.setChannel(OtpChannel.SMS);
        String json = new Gson().toJson(otpCaptureRequest);
        //send this json to gateway on /otp endpoint
        
        String url = "http://139.59.30.133:9090/otp";

        String USER_AGENT = "Mozilla/5.0";

            try {
                URL obj = new URL(url);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                // optional default is GET
                    con.setRequestMethod("POST");

                    //add request header
                    con.setRequestProperty("User-Agent", USER_AGENT);
                    con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
                    con.setDoOutput(true);
                    con.setDoInput(true);

                    OutputStream os = con.getOutputStream();
                    os.write(json.getBytes("UTF-8"));
                    os.close();

                    int responseCode = con.getResponseCode();
                    System.out.println("\nSending 'POST' request to URL : " + url);
                    System.out.println("Response Code : " + responseCode);
                    
                    
                    BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
                    }
                    
                    in.close();

                    //print result
                    System.out.println(response.toString());

                    
                    
            } catch (MalformedURLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            String otp = (String)JOptionPane.showInputDialog(
                    null,
                    "Enter received OTP:",
                    "Authentication",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "");
            
            // Send the OTP data for authentication
            
         AuthCaptureRequest authCaptureRequest = new AuthCaptureRequest();
         
        authCaptureRequest.setAadhaar(jTextField1.getText());
        authCaptureRequest.setCertificateType(CertificateType.preprod);
        authCaptureRequest.setLocation(location);
        authCaptureRequest.setModality(Modality.otp);
        authCaptureRequest.setOtp(otp);
         
         
        try {
            AuthCaptureData authCaptureData;
            authCaptureData = AadhaarBridgeUtil.buildAuthRequest(authCaptureRequest);
            String authjson = new Gson().toJson(authCaptureData);
            
            System.out.println(authjson);
            
            //send this json to gateway /auth endpoint
    
        String authurl = "http://139.59.30.133:9090/auth";

            try {
                URL obj = new URL(authurl);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                // optional default is GET
                    con.setRequestMethod("POST");

                    //add request header
                    con.setRequestProperty("User-Agent", USER_AGENT);
                    con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
                    con.setDoOutput(true);
                    con.setDoInput(true);

                    OutputStream os = con.getOutputStream();
                    os.write(authjson.getBytes("UTF-8"));
                    os.close();

                    int responseCode = con.getResponseCode();
                    System.out.println("\nSending 'POST' request to URL : " + authurl);
                    System.out.println("Response Code : " + responseCode);
                    
                    
                    BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
                    }
                   
                    JSONParser parser = new JSONParser();
                    
                    Object object = parser.parse(response.toString());
                    
                    JSONObject jsonObject = (JSONObject) object;
                    
                    Boolean success = (Boolean) jsonObject.get("success");
                    
                    in.close();
                    //print result
                    System.out.println(response.toString());
                    
                    System.out.println(success);
                    
                    if (success == true)
                        JOptionPane.showMessageDialog(null, "You are authenticated through OTP.");
                    else
                        JOptionPane.showMessageDialog(null, "You are not authenticated.");

                    
                    
            } catch (MalformedURLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (org.json.simple.parser.ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        KycCaptureData kycCaptureData = new KycCaptureData();
        kycCaptureData.setConsent(ConsentType.Y);
        kycCaptureData.setAuthCaptureData(authCaptureData); //refer authCaptureData for otp verifier
        kycCaptureData.setTs(ISO8601.now());
        String kycjson = new Gson().toJson(kycCaptureData); 
        
        String kycurl = "http://139.59.30.133:9090/kyc";
        
        try {
                URL obj = new URL(kycurl);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                // optional default is GET
                    con.setRequestMethod("POST");

                    //add request header
                    con.setRequestProperty("User-Agent", USER_AGENT);
                    con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
                    con.setDoOutput(true);
                    con.setDoInput(true);

                    OutputStream os = con.getOutputStream();
                    os.write(kycjson.getBytes("UTF-8"));
                    os.close();

                    int responseCode = con.getResponseCode();
                    System.out.println("\nSending 'POST' request to URL : " + kycurl);
                    System.out.println("Response Code : " + responseCode);
                    
                    
                    BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
                    }
                    
                    in.close();
                    //print result
                    System.out.println("kyc response: " + response.toString());
        
            
        }catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        }catch(IOException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
            
         
        
            
            //send this json to gateway on /kyc/raw endpoint

		
    
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
